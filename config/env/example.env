##############################################################
#
# @author shi-lai-mu <https://github.com/shi-lai-mu>
# @description 应用全局 每项请务必注释,必要时加上see或枚举值
#
##############################################################


# 监听HOST
LISTEN_HOSTNAME="127.0.0.1"
# 监听PROT
LISTEN_PROT=3000




# ---------------------- #
#           APP
# ---------------------- #

# 应用关键字
APP_KEYWORD=应用名称
# 应用名称
APP_NAME=${APP_KEYWORD}后端
# 应用版本
APP_VERSION=v1

# JWT 秘钥
APP_JWT_SECRET=16位左右的随机码
# JWT 签名过期时间
APP_JWT_OPT_EXPIRES_IN=7d




# ---------------------- #
#        DataBase
# ---------------------- #

# 数据库类型。您必须指定您使用的数据库引擎
# "mysql", "postgres", "cockroachdb", "mariadb", "sqlite", "better-sqlite3", "capacitor", "cordova", "nativescript", "oracle", "mssql", "mongodb"
DB_TYPE=mysql
# 库默认名
DB_NAME=DEFAULT
# 数据库主机
DB_HOST="127.0.0.1"
# 数据库主机端口。默认 mysql 端口是3306
DB_PROT=3306
# 数据库用户名
DB_USERNAME=root
# 数据库密码
DB_PASSWORD=root
# 连接的字符集。这在 MySQL 的 SQL 级别中称为“排序规则”（如 utf8_general_ci）。如果指定了 SQL 级别的字符集（如 utf8mb4），则使用该字符集的默认排序规则。（默认：UTF8_GENERAL_CI)
DB_CHARSET=utf8mb4
# MySQL 服务器上配置的时区。这用于将服务器日期/时间值类型转换为 JavaScript 日期对象，反之亦然。这可以是local, Z, 或形式为+HH:MMor的偏移量 -HH:MM。（默认值：local）
TIMEZONE=UTC
# 数据库名称
DB_DATABASE=
# 要为此连接加载和使用的实体或实体模式。接受要从中加载的实体类、实体架构类和目录路径。目录支持全局模式
DB_ENTITIES="dist/**/*.entity{.ts,.js}"
# 如果true，自动加载的模型将被同步（默认值：true） TODO: true不应在生产中使用设置- 否则您可能会丢失生产数据。
DB_SYNCHRONIZE=true
# 指示是否启用日志记录。如果设置为true则将启用查询和错误日志记录。您还可以指定要启用的不同类型的日志记录，例如["query", "error", "schema"]
DB_LOGGING=all
# 用于记录目的的记录器。可能的值为“高级控制台”、“简单控制台”和“文件”。默认为“高级控制台”。您还可以指定一个实现Logger接口的记录器类
DB_LOGGER=
# 此数据库连接上的所有表（或集合）都带有给定字符串的前缀。
DB_TABLEFIX=
# 连接重试之间的延迟（ms）（默认值：3000）
DB_RETRY_DELAY=3000
# 尝试连接到数据库的次数（默认值：10）
DB_RETRY_ATTEMPTS=10
# 如果查询执行时间超过此给定的最大执行时间（以毫秒为单位），则记录器将记录此查询。
MAX_QUERY_EXECUTION_TIME=1000000
# 将协议详细信息打印到标准输出。可以是 true/false 或应打印的数据包类型名称数组。（默认值：false）
BG_DEBUG=true

# 启用实体结果缓存。您还可以在此处配置缓存类型和其他缓存选项
DB_CACHE=true
# 缓存类型
DB_CACHE_TYPE=redisio
# Redis服务器的IP地址
DB_CACHE_REDIS_HOST=${REDIS_HOST}
# Redis服务器端口
DB_CACHE_REDIS_PORT=${REDIS_PORT}
# 如果设置，客户端将在连接时运行 Redis auth 命令。别名auth_pass 注意节点Redis < 2.5 必须使用auth_pass
DB_CACHE_REDIS_PASSWORD=${REDIS_PASSWORD}
# 如果设置，客户端将select在连接时运行 Redis命令。
DB_CACHE_REDIS_DB=0




# ---------------------- #
#          Redis
# ---------------------- #

# Redis服务器的IP地址
REDIS_HOST="127.0.0.1"
# Redis服务器端口
REDIS_PORT=6379
# 前缀
REDIS_KEYFIX=redis前缀
# 如果您将系列设置为“IPv6”，则可以强制使用 IPv6。请参阅 Node.js net或dns模块以了解如何使用系列类型。
REDIS_FAMILY=4
# 如果设置，客户端将在连接时运行 Redis auth 命令。别名auth_pass 注意节点Redis < 2.5 必须使用auth_pass
REDIS_PASSWORD=redis密码
# 如果设置，客户端将select在连接时运行 Redis命令。
REDIS_DB=0




# ---------------------- #
#         Swagger
# ---------------------- #

# Swagger 内容的标题
SWAGGER_TAB_TITLE=${APP_NAME} Swagger
# Swagger 内容的标题
SWAGGER_CONTENT_TITLE=${APP_NAME}
# Swagger 内容的简介信息
SWAGGER_CONTENT_DESCRIPTION="${APP_NAME}后端API<br>Swagger     [**链接**](./)<br>响应文档     [**链接**](./code/)<br>前端对接 [请求地址](../)<br>导出openapi json <a href=/${SWAGGER_IMPORT_OPENAPI_JSON_URL} download=${APP_NAME}_openapi_3.json>下载</a>"
# Swagger 版本
SWAGGER_VERSION=${APP_VERSION}.0
# Swagger API DOC URL
SWAGGER_API_DOC_URL=api-doc
# Swagger 导出api json
SWAGGER_IMPORT_OPENAPI_JSON_URL=${SWAGGER_API_DOC_URL}-json
# SLM API CODE URL
SWAGGER_API_CODE_URL=/${SWAGGER_API_DOC_URL}/code
# SLM API CODE TITLE URL
SWAGGER_API_CODE_TITLE_URL=${APP_NAME} 响应状态文档




# ---------------------- #
#          Email
# ---------------------- #

# 邮件服务器源
EMAIL_TRANSPORT_HOST=xxx.xxx.xx.xxx
# 邮件服务器端口
EMAIL_TRANSPORT_PORT=465
# 邮件服务器认证账号
EMAIL_TRANSPORT_AUTH_USER=xxxxxxxx@xxx.xxx
# 邮件服务器认证密码
EMAIL_TRANSPORT_AUTH_PASS=服务源提供的密码
# 发送邮件的昵称
EMAIL_SEND_FROM_NAME=${APP_KEYWORD}
# 发送邮件的账号
EMAIL_SEND_FROM_ADDRESS=${EMAIL_TRANSPORT_AUTH_USER}